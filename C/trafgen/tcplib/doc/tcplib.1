.TH TCPLIB_0.9 3N "3 February 1992"
.SH NAME
tcplib \- TCP/IP wide-area traffic characteristic library
.SH DESCRIPTION
tcplib is a library of wide-area TCP applications traffic source characteristics.
To use it, load the library, libtcp.a, together with your simulator using 
\fBld(1)\fR.  (If you use tcplib, please send me (jamin@usc.edu) 
your e-mail address so that I can inform you of bug fixes and upgrades.)
.PP
Since tcplib uses lrand48(3) and drand48(3),
you should make a call to srand48(3) with an appropriate random
number seed before calling any of the tcplib functions.
You also want to link your program with the math library.
The following functions are provided with version 0.9 of the library:
.SH SYNOPSIS
#include "tcpapps.h"
.sp
int telnet_pktsize();            
.br
	/* in bytes, excluding headers */
.br
float telnet_interarrival();        
.br
	/* in milliseconds, gap between two packets */
.br
float telnet_duration();        
.br
	/* in milliseconds, length of a conversation */
.sp
int ftp_ctlsize();               
.br
	/* in bytes, excluding headers */
.br
int ftp_nitems();                
.br
	/* number of items sent per conversation */
.br
int ftp_itemsize();              
.br
	/* in bytes, only the data size */
.sp
int nntp_nitems();               
.br
	/* number of items sent per conversation */
.br
int nntp_itemsize();             
.br
	/* bytes of data sent per item */
.sp
int smtp_itemsize();             
.br
	/* in bytes, message size */
.sp
float phone_talkspurt();             
.br
	/* in ms wall-clock time */
.br
float phone_pause();             
.br
	/* in ms wall-clock time */
.sp 2
#include "brkdn_dist.h"
.sp
struct brkdn_dist *brkdn_dist()
.br 
	/* returns a breakdown distribution table. */
.br
char *next_app(struct brkdn_dist *brkdn_dist)
.br
	/* name of next application to arrive. */
.fi
.SH USAGE
Suppose you want to simulate a source running TELNET.  First call
\fItelnet_duration()\fR to determine the length of conversation to 
simulate\-\-\fItelnet_duration()\fR returns the duration in 
millisecond unit.  Then
start sending single byte packets until the duration time expires.  The
destination responds with packets whose size is determined by calling
\fItelnet_pktsize()\fR.  Note that the packet size obtained from
\fItelnet_pktsize()\fR does not include the size of
protocol headers.  The interarrivals between two source packets are obtained
from \fItelnet_interarrival()\fR, which again returns time in milliseconds.  
.PP
To simulate a source running FTP, first call \fIftp_nitems()\fR to decide
how many items to send.  For each item, use \fIftp_itemsize()\fR to determine the
size of each item.  When sending the items, remember to fragment them into
MTU-size packets.  To simulate the handshaking between item transfers, use
\fIftp_ctlsize()\fR to get the size of the handshake packets.  The duration and
packet-interarrival of this handshaking period is not currently modeled.
.PP
NNTP and SMTP could be simulated similarly.  Each SMTP conversation transfers
only one item.  The handshaking period of NNTP is not modeled.  The 
bidirectionality of NNTP transfer could be simulated by initiating a separate
NNTP conversation in each direction.
.PP
Phone conversations could be treated like TELNET conversations.
Phone talkspurt is modeled by \fIphone_talkspurt()\fR and pauses 
between talkspurts is modeled by \fIphone_pause()\fR.  We do not have
a model for phone duration.  
.PP
The connection setup and teardown phases, \fIACK\fR and \fIkeep-alive\fR 
packets have to be generated by the simulator if their presence are desired.
.PP
Given the characteristics that completely describe each application's 
conversation, we now need to decide when to start a new conversation.
Interarrival times of phone conversations have been shown to be exponentially 
distributed.  For lack of a better model, we currently assume
exponential interarrival time for the aggregate of all conversations
originating from a source.  At each 
arrival time, we decide which application to run by calling 
the \fInext_app()\fR routine.  \fINext_app()\fR takes as an argument a 
traffic breakdown distribution obtained from the routine \fIbrkdn_dist()\fR.  
\fIBrkdn_dist()\fR takes the mean and variance of each application's 
probability of occurring and returns a traffic breakdown distribution; the
mean and variance were calculated from the measured breakdown of our traces.  
In generating the traffic breakdown distribution, \fIbrkdn_dist()\fR 
uses the Ahrens method for generating random numbers distributed as a gamma 
distribution of integer order \fIr\fR, the \fIr\fR\-stage Erlangian distribution. 
.SH "SEE ALSO"
.BR srand48(3),
.BR tcplibgen(1),
.BR ld(1),
.BR ar(1V),
.BR ranlib(1).
.sp
Danzig, P.B. and Jamin, S., \fItcplib: A Library of TCP Internetwork 
Traffic Characteristics\fR, USC-CS-91-495, Sept. '91.
.sp
Caceres, R., Danzig, P.B., Jamin, S., and Mitzel, D.J., 
"Characteristics of Wide-Area TCP/IP Conversations,"
\fI Proc. of ACM SIGCOMM '91\fR, Sept. '91.
.sp
Brady, P.T., "A Technique for Investigating On-Off Patterns of Speech," 
\fIThe Bell System Technical Journal\fR, Jan '65, pp. 1-22.
.sp
Kleinrock, L., \fIQueueing Systems\fR, vol. 1, John Wiley & Sons, 1976,
p. 124.
.sp
Press, W.H., et al., \fINumerical Recipes in C\fR, Cambridge University 
Press, 1988, p. 220.
