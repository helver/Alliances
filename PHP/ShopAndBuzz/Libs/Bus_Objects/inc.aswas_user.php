<?php

include_once("PG_DBWrapper.inc");
include_once("Ses_Objects/inc.session.php");
include_once("inc.ebay_functions.php");
include_once("inc.commission.php");
include_once("Template.inc");


# This class is WAY too big.  We need to find a way to Delegate some
# of this stuff to subclasses.
class aswas_user
{
    // administrative attributes
  private $debug;  # Sets a local debugging level within the object.
  private $config; # Access to a ConfigFileReader object that's not really used.
  private $dbh;    # Access to a DBWrapper object for database interaction.

    // generic attributes
  private $username;    # User's internal username.
  private $userid;      # User's internal unique ID.
  private $admin;       # Is the user an Admin user? true or false
  private $isSeller;    # Is the user a currently active Seller? true or false
  private $hivemap;     # Hash of user's Hive.
  private $honecombmap; # Hash of user's Honeycomb.

    // session attributes
  private $sess;        # PHP Session object.
  private $auth;        # Has this user been authenticated? true or false
  private $lastauth;    # Number of seconds since last time password was asked

  private static $usercount = 0; 

    // eBay attributes
  private $ebay_username; # eBay username.
  private $ebay_sid;      # eBay SID used for secure operations.
  private $ebay_auth;     # eBay authorization token.
  private $ebay_expire;   # Date ebay Auth&Auth token expires.
  private $ebay_status;   # User status within eBay: in good standing or not.
  
    // CONSTRUCTOR
  public function __construct($mydbh)
  {
    self::$usercount++;

    if (self::$usercount == 1) {
      $this->sess = new Session();
    }

    if($this->debug > 0) {
      print "In aswas_user";
    }
    $this->dbh = $mydbh;
    $this->ebay_auth     = 0;  // Lazy load.
    $this->ebay_expire   = 0;  // Lazy load.
    $this->ebay_username = 0;  // Lazy load.

    if($this->debug > 0) {
       print "Session Active?: " . $this->sess->is_active();
    }
 
    $this->hivemap = -1;
    $this->honeycombmap = -1;

    if (isset($this->sess) && $this->sess->is_active()) {
      $this->username = $this->sess->get('name');
      $this->userid   = $this->sess->get('id');
      $this->auth     = $this->sess->get('auth');
      $this->lastauth = $this->sess->get('lastauth');
      $this->admin    = $this->sess->get('admin');
      $this->ebay_sid = $this->sess->get('sid');
    } else {
      $this->name     = "Name is not set";
      $this->userid   = -1;
      $this->auth     = 0;
      $this->lastauth = 0;
      $this->admin    = 0;
      $this->ebay_sid = 0;
    }
  }

    // DESTRUCTOR
  public function __destruct()
  {
    self::$usercount--;
  }

//////////
        // Private API -- Static FUNCTIONS
//////////

  # Generates an optional limit clause based on
  # the parameter passed in as $num.
  # Utility
  private static function _genLimit($num)
  {
    $top = "";
    if($num != -1) {
      $top = "limit $num";
    }
    return $top;
  }
  
  # Takes an epoch time and converts it to more
  # SQL palatable date format.
  # Utility
  private static function Epoch2SQL($epoch)
  {
    return date('Y-m-d', $epoch);
  }

  # Takes a time generated by SQL statements and
  # converts it to an epoch time. Note, accepts ISO 8601 format
  # Utility
  private static function SQL2Epoch($sql)
  {
    return strtotime($sql);
  }

  # Generates a random, unique token to be used to send to the
  # user to validate their email address.  The user comes back
  # to the site via a link containing this token and we can be
  # fairly sure that they could only have gotten the token
  # through the email and so the email address is verified.
  # Utility
  private static function GenerateToken($username="")
  {
    return md5(uniqid(rand(), true));
  }

//////////
        // PUBLIC API -- USER FUNCTIONS -- Data Accessors
//////////


  # Stupidly named Accessor function for userid.
  # No Database
  public function GetMyID()
  {
     return $this->getUserID();
  }

  # Better named Accessor function for userid.
  # No Database
  public function getUserID()
  {
    return $this->userid;
  }
  
  # Accessor function for admin.
  # No Database
  public function IsAdmin()
  {
    $retval = false;

    # We only admit that the user is an admin user
    # if they're authenticated. 
    if ($this->auth) {
      $retval = $this->admin;
    }
    return $retval;
  }

  # Stupidly named Accessor function for username.
  # No Database
  public function GetDisplayName()
  {
    return $this->getUserName();
  }

  # Better named Accessor function for userid.
  # No Database
  public function getUserName()
  {
    return $this->username;
  }
  
  # Reads the stored Hive attribute out of the
  # user's Session object.
  # No Database
  # Session
  # Hive
  public function GetMyHiveSession()
  {
    return $this->sess->get("hive");
  }

  # Checks to see if a given user is in my hive.
  # No Database
  # Hive
  public function UserInHive($user)
  {
    if($this->hivemap == -1) {
      $this->GetHiveMap();
    }

    if($this->debug >= 5) {
      print("user: $user<Br>\n");
      print_r($this->hivemap);
    }

    if(isset($this->hivemap[$user])) {
      return true;
    }
    return false;
  }

  # Validates that the user has a record in the ebay
  # table.  This should indicate that they've completed
  # the eBay Auth&Auth token acquisition and so they've
  # been authenticated and validated.  This function is
  # not AND SHOULD NOT be called from many places.  It's
  # called in handle_login, public and private profiles.
  # That's enough to catch most people most of the time.
  # 1st Person Database
  # eBay
  # Signup
  public function IsProperlyRegistered()
  {
    $buid = $this->dbh->SelectSingleValue("buzz_user_id", "ebay", "buzz_user_id = " . $this->userid);
    
    # If the user isn't properly credentialed, stop and redirect
    # them to the ebay Auth&Auth acquisition flow.
    if($buid != $this->userid) {
      $goto = "/ebay/need_ebay_auth.php";
      header("Location: $goto");
      exit();
    }
  
    ##
    ## If there was a problem getting the auth&auth token,
    ## this field will be blank, send them back to try again. 
    $ebay_exp = $this->dbh->SelectSingleValue("ebay_exp_date", "ebay", "buzz_user_id = " . $this->userid); 

    if (!$ebay_exp || $ebay_exp == -1) {
      $goto = "/ebay/need_ebay_auth.php";
      header("Location: $goto");
      exit();
    }

    return true;
  }
    

//////////
        // PUBLIC API -- USER FUNCTIONS -- Database Manipulators
//////////

  # Takes basic user information and creates a new entry in the 
  # unconfirmed_user table.  User has to go through the account
  # validation process with eBay for us to trust the account 
  # information.
  # 1st Person Database
  # Signup
  # User Profile
  public function AddUser($username, $password, $name, $email, $ebay_username='', $security_level=0)
  {
    $token = $this->GenerateToken($username);
    $fields = array("username" => $username, 
                    "email"    => $email, 
                    "password" => $password, 
                    "ebay_username" => $ebay_username, 
                    "admin_code" => $security_level,
                    "token"    => $token);
    $res = $this->dbh->Insert("unconfirmed_user", $fields);
    return $token;
  }

  # FIXME.  Don't use username for this.  Use userid.
  # 1st Person Database
  # User Profile
  public function DeleteUserInfo()
  {
    $res = $this->dbh->Delete("buzz_user", "lower(username=lower('" . $this->username . "')");
    return $res;
  }

  # FIXME.  Don't use username for this.  Use userid.
  # 1st Person Database
  # User Profile
  public function UpdateUserInfo($myVals)
  {
    return $this->dbh->Update("buzz_user", $myVals, "lower(username=lower('" . $this->username . "')");
  }

  # FIXME.  This function should not be used anywhere.  Users
  # should only be added through the ConfirmUnconfirmed function.
  # 3rd Person Database
  # Signup
  # User Profile
  public function AddUserInfo($myVals)
  {
    $res = $this->dbh->Insert("buzz_user", $myVals);
  }


  # FIXME.  Don't use username for this.  Use userid if possible.
  # 1st Person Database
  # 3rd Person Database
  # Logging
  public function logMessage($userName, $msg)
  {
    # This Query Needs a View.
    $this->dbh->Insert("user_profile_mesgs", "(buzz_user_id, message, date_added) SELECT id, '$msg', now() FROM buzz_user WHERE lower(username) = lower('$userName')");
  }

  # At the end of the confirmation process, we take the entry from the
  # unconfirmed user table and move it into a couple of different tables
  # as a fully confirmed and valid user.
  # 1st Person Database
  # Signup
  public function ConfirmUnconfirmed($token)
  {
    # No need for a view on this query.
    $username = $this->GetUnconfirmedUserUsername($token);

    if($username != -1 && $username != "") {
      $res = $this->dbh->Insert("buzz_user", " (select nextval('buzz_user_id_seq'), email, username, password, 0 from unconfirmed_user where lower(token)=lower('$token'))");

      if ($res == 1) {
        # No need for a view on this query.
        $buzz_id = $this->dbh->SelectSingleValue("max(id)", "buzz_user");
        $res2 = $this->dbh->Insert("buzz_user_profile", "(buzz_user_id, email_pref, paypal_email, realname) SELECT $buzz_id, 1, paypal_user, realname FROM unconfirmed_user where lower(token)=lower('$token')");
        $res2 = $this->dbh->Insert("ebay", "(buzz_user_id, ebay_username, entry_date) select $buzz_id, ebay_username, now() from unconfirmed_user where lower(token)=lower('$token')");
        $res2 = $this->dbh->Delete("unconfirmed_user", "lower(token)=lower('$token')");
      }

      $this->LoadUser($username);
      return $res;
    }
    return -1;
  }




//////////
        // PUBLIC API -- USER FUNCTIONS -- Database Accessors
//////////

  # Accepts a username and loads information about that user into
  # the current object.
  # 1st Person Database
  # 3rd Person Database
  # User Profile
  public function LoadUser($myUser, $myDebug=0, $myConfig="")
  {
    $this->config = $myConfig;
    $this->debug = $myDebug;
    $this->username = $myUser;
    if($this->isValidUsername() > 0) {
        # This Query Needs a View.
    	list($this->userid, $this->admin) = $this->dbh->SelectFirstRow("id, admin_code", "buzz_user", "lower(username)=lower('$myUser')");
    }
  }

  # Loads the current object with information about a user as identified
  # by their eBay username.
  # 1st Person Database
  # 3rd Person Database
  # User Profile
  # eBay
  public function LoadEbayUser($myUser, $myDebug=0, $myConfig="")
  {
    $this->config = $myConfig;
    $this->debug = $myDebug;
    $this->ebay_username = $myUser;
    if($this->isValidEbayUsername() > 0) {
      # This Query Needs a View.
      $uid = $this->dbh->SelectFirstRow("buzz_user_id", "ebay", "lower(ebay_username)=lower('$myUser')");
      $this->userid = $uid['buzz_user_id'];
      $where = "id=" . $this->userid;
      list($this->username, $this->admin) = $this->dbh->SelectFirstRow("username,admin_code", "buzz_user", $where);
    }
  }

  # Given a username, returns the email address associated with
  # the unconfirmed_user record for that username.
  # 3rd Person Database
  # 1st Person Database
  # Signup
  public function GetUnconfirmedUserEmail($user)
  {
    # No need for a view on this query.
    $res = $this->dbh->SelectSingleValue("email", "unconfirmed_user", "lower(username)=lower('$user')");
    return $res;
  }

  # Given an email validation token, returns the username associated 
  # with the unconfirmed_user record for that token.
  # 3rd Person Database
  # 1st Person Database
  # Signup
  public function GetUnconfirmedUserUsername($token)
  {
    # No need for a view on this query.
    return $this->dbh->SelectSingleValue("username", "unconfirmed_user", "lower(token)=lower('$token')");
  }

  # FIXME.  This information should be loaded into the session cache.
  # FIXME.  Don't use username for this.  Use userid if possible.
  # Load all the information from the buzz_user table about me.
  # 1st Person Database
  # User Profile
  public function GetUserInfo() 
  {
    # No need for a view on this query.
    $res = $this->dbh->SelectFirstRow("*", "buzz_user", "lower(username)=lower('" . $this->username . "')");
    return $res;
  }

  # Does the user with the given username have an active seller account?
  # 3rd Person Database
  # Seller Profile
  public function IsUserSeller($username)
  {
    # This Query Needs a View.
    $res = $this->dbh->SelectSingleValue("sp.subscription_active", "buzz_user b inner join seller_profile sp on b.id = sp.buzz_user_id", "b.username = '$username'");

    if ($res == 't') {
      return true;
    } 
    return false;
  }

  # Do I have an active seller account?
  # 1st Person Database
  # Seller Profile
  public function IsSeller()
  {
    if (!isset($this->isSeller)) {
      # No need for a view on this query.
      $res = $this->dbh->SelectSingleValue("subscription_active", "seller_profile", "buzz_user_id = " . $this->userid);
      if ($res == 't') {
        $this->isSeller = true;
      } else {
        $this->isSeller = false;
      }
    }
    return $this->isSeller;
  }

  # FIXME.  This information should be loaded into the session cache.
  # Get my real name from the database
  # 1st Person Database
  # User Profile
  public function GetRealName()
  {
    # No need for a view on this query.
    return $this->dbh->SelectSingleValue("realname", "buzz_user_profile", "buzz_user_id = " . $this->getUserID());
  }


  # Grab my existing Hive list and slap it into a session
  # variable.
  # 1st Person Database
  # 3rd Person Database
  # Session
  # Hive
  public function AddMyHiveSession()
  {
    # This Query Needs a View.
    $res = $this->dbh->Select("username as user", "hive h, buzz_user bu", "bu.id=h.member_id and h.buzz_user_id=" . $this->userid);
    $this->sess->store("hive", $res);
  }
  
  # Grab my existing Hive list make a hash out of it and stick it
  # in the hivemap property.
  # 1st Person Database
  # 3rd Person Database
  # Hive
  public function GetHiveMap()
  {
    # This Query Needs a View.
    $this->hivemap = $this->dbh->SelectMap("username, h.member_id", "hive h, buzz_user bu", "bu.id = h.member_id and h.buzz_user_id = " . $this->userid);
    return $this->hivemap;
  }

  # FIXME: Why don't all Hive queries feed out of this method?
  # Grab Hive data: either grab my Hive, or grab a list of everyone
  # whose Hives I'm in.  The $invert parameter dictates the direction
  # of the query.
  # 1st Person Database
  # 3rd Person Database
  # Hive
  public function GetMyHive($numUsers=-1, $invert=false)
  {
    $top = $this->_genLimit($numUsers);

	$direction = array("h.member_id", "h.buzz_user_id");
	if($invert){
		$direction = array("h.buzz_user_id", "h.member_id");
	}
	
    # This Query Needs a View.
    $res = $this->dbh->Select(
      "username as user, r.reco_id as reco", 
 
      "(hive h inner join buzz_user bu on bu.id = " . $direction[0] . ") " .
      "left outer join recommendation r on (r.seller_id = bu.id and r.buzz_user_id = " . $this->userid . ")", 

      $direction[1] . "=" . $this->userid, "random()" . " $top"
    );
    
    return $res;
  }


  # FIXME: How is this different than GetMyHive?
  # Function to use to pull hive with recommendation and other user specific info
  # 1st Person Database
  # 3rd Person Database
  # Hive
  public function GetMyHiveViewer($numUsers = -1, $viewerid)
  {
    $top = $this->_genLimit($numUsers);

    # This Query Needs a View.
    $res = $this->dbh->Select("username as user, r.reco_id as reco", "hive h, buzz_user bu left outer join  recommendation r on (r.seller_id=bu.id and r.buzz_user_id=$viewerid) left outer join seller_info si on (r.buzz_user_id=bu.id)", "bu.id=h.member_id and h.buzz_user_id=" . $this->userid , "random()" . " $top");

    return $res;
  }

  # FIXME.  This is broken.  Says Hive all the time when it
  # should say Honeycomb sometimes.
  # 1st Person Database
  # 3rd Person Database
  # Logging
  public function GetLogMessages($count=5, $forme=false)
  {
    $labels = array(
      "added" => "new Members to his/her Hive.",
      "removed" => "Members from his/her Hive.",
    );

    #$this->dbh->debug(5);
    
    if($forme) {
      $res = $this->dbh->SelectOneColumn("message", "user_profile_mesgs", "buzz_user_id = " . $this->userid, "date_added DESC", "", "", "LIMIT $count");

      $qres = array();
      foreach($res as $k) {
        list($name, $op, $xname, $stuff) = explode(" ", $k, 4);
        $xname = "<a href=\"/users/$xname/\">$xname</a>";
        $qres[] = "You $op $xname $stuff";
      }
      $res = $qres;
    } else {
      $res = $this->dbh->SelectOneColumn("message", "user_profile_mesgs", "date_added >= now() - interval '5 days' and buzz_user_id = " . $this->userid, "date_added DESC", "", "", "LIMIT $count");

      $mesgs = array();
      foreach($res as $col) {
        list($name, $op, $res) = explode(" ", $col, 3);
        if(!isset($mesgs["$name $op"])) {
          $mesgs["$name $op"] = 1;
        } else {
          $mesgs["$name $op"] += 1;
        }
      }

      $res = array();
      foreach($mesgs as $k=>$v) {
        list($name, $op) = explode(" ", $k);
        $res[] = "$name $op $v " . $labels[$op]; 
      }
    }

   $res1 = $this->dbh->SelectOneColumn("message", "system_messages", "entry_date >= now() - interval '7 days'");
   foreach($res1 as $col1) {
	$res[] = $col1;
   }

    if(!is_array($res)) {
      $res = array();
    }
    return $res;
  }


  # Writes the same log message to each user that has me in
  # their Hives.
  # Logging
  # Hive
  private function _hiveLogMessage($msg)
  {
    $this->logMessage($this->getDisplayName(), $msg);
    foreach($this->GetHivesContainsMe() as $k) {
      $this->logMessage($k["user"], $msg);
    }
  }
    

  # Removes a user from my Hive.
  # 1st Person Database
  # Logging
  # Hive
  public function RemoveUserFromMyHive($theirUser)
  {
    $theirID = $this->dbh->SelectSingleValue("id", "buzz_user", "lower(username)=lower('$theirUser')"); 
    if($this->UserInHive($theirUser)) {
      #print("Found in hivemap.<br>\n");
      $res = $this->dbh->Delete("hive", "buzz_user_id = " . $this->userid . " and member_id = " .  $theirID);
      $this->_hiveLogMessage($this->getDisplayName() . " removed $theirUser as a Hive Member.");
    } else {
      $res = -1;
    }
    return $res;
  }

  # Adds a user to my Hive.
  # 1st Person Database
  # 3rd Person Database
  # Logging
  # Hive
  public function AddUserToMyHive($theirUser)
  {
    $theirID = $this->dbh->SelectSingleValue("id", "buzz_user", "lower(username)=lower('$theirUser')"); 

    if(!isset($this->hivemap[$theirUser])) {
      $res = $this->dbh->Insert("hive", array("buzz_user_id" => $this->userid, "member_id" => $theirID, "date_added" => "now"));
      $this->_hiveLogMessage($this->getDisplayName() . " added $theirUser as a new Hive Member.");
    }
    return $res;
  }

  # FIXME: Why don't all HOneycomb queries feed out of this method?
  # Grab Honeycomb data: either grab my Honeycomb, or grab a list of everyone
  # whose Honeycombs I'm in.  The $invert parameter dictates the direction
  # of the query.
  # 1st Person Database
  # 3rd Person Database
  # Honeycomb
  public function GetMyHoneycomb($numUsers=-1, $invert=False)
  {
    #$this->dbh->debug(5);
    if($numUsers != -1) {
      $top = "limit $numUsers";
    } else {
      $top = "";
    }

	$direction = array("h.member_id", "h.buzz_user_id");
	if($invert){
		$direction = array("h.buzz_user_id", "h.member_id");
	}
	
    $res = $this->dbh->Select(

      "bu.username as user, r.reco_id as reco", 
 
      "(honeycomb h inner join buzz_user bu on bu.id = " . $direction[0] . ") " .
      "left outer join recommendation r on (r.seller_id = bu.id and r.buzz_user_id = " . $this->userid . ")", 

      $direction[1] . "=" . $this->userid, "random()" . " $top"
    );
    
    //$res = $this->GetMyHiveSession();
    return $res;
  }


  # FIXME: Why don't we use GetMyHoneycomb?
  # Grab Honeycomb data
  # 1st Person Database
  # 3rd Person Database
  # Honeycomb
  public function GetMyHoneycombViewer($numUsers = -1, $viewerid = "")
  {
    if($numUsers != -1) {
      $top = "limit $numUsers";
    } else {
      $top = "";
    }

    $res = $this->dbh->Select(
              "username as user, r.reco_id as reco, bu.id as userid", 
              "honeycomb h, buzz_user bu left outer join recommendation r on (r.seller_id=bu.id and r.buzz_user_id=$viewerid)", 
              "bu.id=h.member_id and h.buzz_user_id=" . $this->userid, "random()" . " $top");

    return $res;
  }



  # Grab my existing Honeycomb list make a hash out of it and stick it
  # in the honeycomb property.
  # 1st Person Database
  # 3rd Person Database
  # Honeycomb
  public function GetHoneycombMap()
  {
    $res = $this->dbh->SelectMap("username, h.member_id", "honeycomb h, buzz_user bu", "bu.id = h.member_id and h.buzz_user_id = " . $this->userid);
    $this->honeycombmap = $res;
    return $res;
  }

  # Is the given user in my Honeycomb?
  # Honeycomb
  public function UserInHoneycomb($user)
  {
    if($this->honeycombmap == -1) {
      $this->GetHoneycombMap();
    }

    if($this->debug >= 5) {
      print("user: $user<Br>\n");
      print_r($this->honeycombmap);
    }

    if(isset($this->honeycombmap[$user])) {
      return true;
    }

    return false;
  }

  # Grab my existing Honeycomb list and slap it into a session
  # variable.
  # 1st Person Database
  # 3rd Person Database
  # Session
  # Honeycomb
  public function AddMyHoneycombSession()
  {
	$res = $this->dbh->Select("username as user", "honeycomb h, buzz_user bu", "bu.id=h.member_id and h.buzz_user_id=" . $this->userid, "random()");
	$this->sess->store("honeycomb", $res);
  }


  # Ready my existing Honeycomb list from a session
  # variable.
  # Session
  # Honeycomb
  public function GetMyHoneycombSession () {
    return $this->sess->get("honeycomb");
  }


  # Request that an email be sent to a user.
  # 3rd Person Database
  # Email
  # Utility
  private function _deliverOneEmail($victimID, $body, $email_subject)
  {
    $del_Sched = $this->dbh->SelectSingleValue("email_pref", "buzz_user_profile", "buzz_user_id = $victimID");
    
    if($del_Sched > 1) {
        $fields = array("buzz_user_id" => $victimID, 
                        "deliver_after" => "now",
                        "email_body" => $body,
                        "email_subject" => $email_subject,
                        "in_progress" => 'f',
                       );
    
        $res = $this->dbh->Insert("pobox", $fields);
    } elseif($del_Sched == 1) {    
        $email = $this->dbh->SelectSingleValue("email", "buzz_user", "id = $victimID");
        SendEmail($email, "From:  Shop And Buzz Support <support@shopandbuzz.com>", $email_subject, $body);
    }
  }
  
      
  # Format an email for delivery.
  # Email
  # Utility
  public function deliverEmail($victimID, $email_template, $email_vars, $email_subject="Shop And Buzz Notification")
  {
    $templ = new Template($email_vars);
    $body = $templ->load_file($templ->getTemplateName($email_template, "EmailTemplates"));
    
    $this->_deliverOneEmail($victimID, $body, $email_subject);
  }
  
  # Format an email for delivery to my everyone who has me in their
  # Hive.
  # Email
  # Utility
  # Hive
  public function hiveDeliverEmail($email_template, $email_vars, $email_subject="Shop And Buzz Notification")
  {
    $templ = new Template($email_vars);
    $body = $templ->load_file($templ->getTemplateName($email_template, "EmailTemplates"));

    #$this->dbh->debug(5);
    
    foreach($this->GetHivesContainsMe() as $k=>$v) {
      #print("k: $k -- v: $v<br>\n");
      $this->_deliverOneEmail($v["id"], $body, $email_subject);
    }
    #exit();
  }
    
  # Adds a user to my Honeycomb if they qualify.
  # 1st Person Database
  # 3rd Person Database
  # Logging
  # Honeycomb
  # Email
  # eBay
  # Seller Profile
  public function AddUserToMyHoneyComb($theirUser)
  {
    if($this->UserInHoneycomb($theirUser)) {
      return -1;
    }

    if(!$this->IsUserSeller($theirUser)) {
        return -1;
    }
    
    // Need to add constraint to only allow it to 
    // be added once (key on buzz_user_id and member_id)
    $theirID = $this->dbh->SelectSingleValue("id", "buzz_user", "lower(username)=lower('$theirUser')");
 
    $already_in = $this->dbh->SelectSingleValue("count(1)", "honeycomb", "buzz_user_id = " . $this->userid . " and member_id = $theirID");
      
    if($already_in == 0) {
        $victim = new aswas_user($this->dbh);
        $victim->LoadUser($theirUser);
          
        $has_prior_relationship = hasRelationshipWithBuyer($victim, $this);
        
        if($has_prior_relationship > 0) {  
            $fields = array("buzz_user_id" => $this->userid, 
                            "member_id" => $theirID, 
                            "date_added" => "now",
                            "recommendable" => ($has_prior_relationship == 0 ? 'f' : 't'),
                           );
        
            $res = $this->dbh->Insert("honeycomb", $fields);
            $this->set_ref(-1, $theirID);
            $this->_hiveLogMessage($this->getDisplayName() . " added $theirUser as a new Honeycomb Member.");
            $this->logMessage($theirUser, $this->getDisplayName() . " added $theirUser as a new Honeycomb Member.");
            
            $fields = array("SiteURL" => $GLOBALS["SiteURL"], "username" => $this->GetDisplayName(), "sellername" => $victim->GetDisplayName());
            
            $this->deliverEmail($theirID, "honeycomb_add.tpl", $fields, "New S&B Honeycomb Add");
            $this->hiveDeliverEmail("honeycomb_add.tpl", $fields, "You've Been Added to an S&B Honeycomb!");
        } else {
            $res = $has_prior_relationship;
        }
    }
    return $res;
  }


  # Drops a user from my Honeycomb.
  # 1st Person Database
  # Logging
  # Honeycomb
  public function RemoveUserFromMyHoneyComb($theirUser)
  {
    $theirID = $this->dbh->SelectSingleValue("id", "buzz_user", "lower(username)=lower('$theirUser')");
    if($this->UserInHoneyComb($theirUser)) {
      #print("Found in hmap.<br>\n");
      $res = $this->dbh->Delete("honeycomb", "buzz_user_id = " . $this->userid . " and member_id = " .  $theirID);
      $this->_hiveLogMessage($this->getDisplayName() . " removed $theirUser as a Honeycomb Member.");
      $this->logMessage($theirUser, $this->getDisplayName() . " removed $theirUser as a Honeycomb Member.");
    } else {
      $res = -1;
    }
    return $res;
  }


  # FIXME: Use data from the session object for this.
  # Gets the count of the current size of my Hive.
  # 1st Person Database
  # 3rd Person Database
  # Hive
  public function GetCountHive()
  {
    $res = $this->dbh->SelectSingleValue("count(1)", "hive h, buzz_user bu", 
                                         "bu.id = h.member_id and h.member_id > 0 and h.buzz_user_id=" . $this->userid);
    return $res;
  }

  # FIXME: Use data from the session object for this.
  # Gets the count of the current size of my Honeycomb.
  # 1st Person Database
  # 3rd Person Database
  # Honeycomb
  public function GetCountHoneycomb()
  {
    $res = $this->dbh->SelectSingleValue("count(1)", "honeycomb h, buzz_user bu", 
                                         "bu.id = h.member_id and h.member_id > 0 and h.buzz_user_id=" . $this->userid);
    return $res;
  }

  # FIXME: Make it go away or do something smarter.
  # This is fucking stupid.  Hopefully nothing uses this.
  # 3rd Person Database
  # User Profile
  public function SearchUsers($username)
  {
    $res = $this->dbh->Select("username as user", "buzz_user", "lower(username) = lower('$username')", "user");
    return $res;
  }

//////////
        // PUBLIC API -- EBAY INTERFACE
//////////

  # Database Not Validated
  public function GetEbayStatus ()
  {
    $this->ebay_status = getEbayStatus($this);
    if($this->ebay_status['eBayGoodStanding'] == "1") {
	  $status = "Good Standing";
    } elseif ($this->ebay_status['eBayGoodStanding'] == "0") {
	  $status = "Bad Standing";
    } else {
	  $status = "Unknown Standing";
    }
    return $status;
  }

  # Database Not Validated
  public function GetEbayPowerSeller()
  {
    $ps = $this->dbh->SelectSingleValue("ebay_power_seller", "buzz_user_profile", "buzz_user_id = " . $this->userid);
    return $ps;
  }    

  # Database Not Validated
  public function isEbayPowerSeller()
  {
    $ps = $this->dbh->SelectSingleValue("count(1)", "buzz_user_profile", "ebay_power_seller in ('Bronze', 'Silver', 'Gold', 'Platinum', 'Titanium') and buzz_user_id = " . $this->userid);
    
    return $ps;
  }    


  # Database Not Validated
  public function getCommScheduleDesc($maxlevel=1)
  {
    $commText = "";
    
    $labels = array(1 => "Commissions For Referred Buyers",
                    2 => "Commissions For Buzzing Buyers",);
                    
    for($i = 1; $i <= $maxlevel; $i++) {
       $commInfo = $this->dbh->SelectFirstRow("*", "commission_schedule", "buzz_user_id=" . $this->userid . " and active='t' and comm_level=$i");
       $commText .= "For " . $labels[$i] . ", " . $this->GetDisplayName() . " will pay ";
       $commText .= ($commInfo["pay_type"] == "percent" ? $commInfo["amount"] . "%" : "$" . $commInfo["amount"]);
       $commText .= ($commInfo["limit_type"] == "days" ? " for " . $commInfo["max_limit"] . " days." : " for the first ". $commInfo["max_limit"] . " purchases.");
       $commText .= " All purchases must be over $" . $commInfo["min_pay_threshold"] . " and the maximum commission is $" . $commInfo["max_amount"] . ".<Br>\n";
    }
    
    return $commText;
  }

  # Database Not Validated
  public function GetMyStatus() {
      //Need to figure out what we should return here?  What status?
    return "Seller Is An Active Member";
  }

  # Database Not Validated
  public function GetSellerProfile () {
    #$this->dbh->debug(5);
    $res = $this->dbh->SelectFirstRow("sp.description as description, sc.name as category", "seller_profile sp, seller_category sc", 
                                         "sc.id = sp.category_id and buzz_user_id=" . $this->userid);
    return $res;
  }

  # Database Not Validated
  public function GetHivesContainsMe($numUsers = -1) {
    if($numUsers != -1) {
      $top = "limit $numUsers";
    } else {
      $top = "";
    }

    $res = $this->dbh->Select("bu.username as user, bu.email as email, bu.id as id", "hive h, buzz_user bu", 
                              "bu.id=h.buzz_user_id  and h.buzz_user_id > 0 and h.member_id=" . 
                              $this->userid, "random()" . " $top");

    return $res;
  }

  # Database Not Validated
  public function GetCountHivesContainsMe() {
    $res = $this->dbh->SelectSingleValue("count(1)", "hive", 
                                         "buzz_user_id > 0 and member_id=" . $this->userid);
    return $res;
  }

  # Database Not Validated
  public function GetCountHoneycombsContainsMe() {
    $res = $this->dbh->SelectSingleValue("count(1)", "honeycomb", 
                                         "buzz_user_id > 0 and member_id=" . $this->userid);
    return $res;
  }

//////////
        // PRIVATE METHODS -- EBAY INTERFACE
//////////


//////////
        // PUBLIC API -- COMMISSIONS
//////////

  # Database Not Validated
  public function GetCommissionsPaid($numComms = -1) {
    if($numComms != -1) {
      $top = "limit $numComms";
    } else {
      $top = "";
    }

    $res = $this->dbh->Select("username as user,amount as amount, '/transaction/' || purchase_id || '/' as basis", "paid_comms p, buzz_user bu", "bu.id=p.referral_id and p.payee_id=" . $this->userid, "paid_date" . " $top");

    return $res;
  }

  # Database Not Validated
  public function GetCommisionsReceived($numComms = -1) {
    if($numComms != -1) {
      $top = "limit $numComms";
    } else {
      $top = "";
    }

    $res = $this->dbh->Select("username as user,amount as amount, '/transaction/' || purchase_id || '/' as basis", "paid_comms p, buzz_user bu", "bu.id=p.payee_id and p.referral_id=" . $this->userid, "paid_date" . " $top");

    return $res;
  }

//////////
        // PRIVATE METHODS -- COMMISSIONS
//////////


//////////
        // PUBLIC API -- EMAIL PREFERENCES
//////////

  # Database Not Validated
  public function GetMyBlacklist() {
    $res = $this->dbh->Select("username as user", "blocked_emails b, buzz_user bu", "bu.id=b.from_id and b.to_id=" . $this->userid);

    return $res;
  }


  # Database Not Validated
  public function AddBlacklist($blocked) {
      //need to add constraint on from_id and to_id
    $tool = $this->dbh->SelectSingleValue("id", "buzz_user", "lower(username)=lower('$blocked')");
    $res = $this->dbh->Insert("blocked_emails", array("to_id" => $this->userid, "from_id" => $tool));

    return $res;
  }

  # Database Not Validated
  public function RemoveBlacklist ($blockID) {
    $res = $this->dbh->Delete("blocked_emails", "from_id=$blockID and to_id=" . $this->userid);

    return $res;
  }

  # Database Not Validated
  public function GetMyEmailFreq () {
    $res=$this->dbh->SelectSingleValue("value as delivery_schedule", "buzz_user_profile bup, email_freq ef", "ef.preference=bup.email_pref and bup.buzz_user_id=" . $this->userid);

    return $res;
  }

  # Database Not Validated
  public function UpdateEmailFreq ($pref) {
    $res = $this->dbh->Update("buzz_user_profile", "email_pref=$pref", "buzz_user_id=" . $this->userid);

    return $res;
  }


  # Database Not Validated
  public function GetInviteCount() {
	$res = $this->dbh->SelectSingleValue("count(1) as myCount", "invites", "buzz_user_id=
". $this->userid);

	if($res < 1) {
		$res = 0;
	}

	return $res;
  }

  # Database Not Validated
  public function GetMyInvites ($myID = -1) {
    if ($myID != -1) {
      $myWhere = " and invite_id=$myID";
    } else {
      $myWhere = "";
    }

    $res = $this->dbh->Select("invite_id as id, invite_name as name, invite_email as email,to_char(invite_date, 'mm/dd/yyyy') as date, invite_status as status", "invites", "buzz_user_id=". $this->userid . "$myWhere");

    return $res;
  }

  # Database Not Validated
  private function _doInviteOthers($name, $email)
  {
    $res = $this->dbh->Insert("invites", 
                              array("buzz_user_id" => $this->userid,
                                    "invite_name"  => $name,
                                    "invite_email" => $email,
                                    "invite_date" => "now",
                                    "nomoreemail" => 'f',
                                    "invite_status" => "Pending" ));
    $results= $this->dbh->SelectSingleValue("invite_id", "invites", "invite_name='$name' and invite_email='$email' and invite_status = 'Pending'");
    return $results;
  }
    
  # Database Not Validated
  public function InviteOthers ($name, $email)
  {
    $already = $this->dbh->SelectFirstRow('invite_id, nomoreemail, buzz_user_id', 'invites', "invite_email = '$email'");
    
    if(is_array($already) && isset($already['invite_id']) && $already['invite_id'] > 0) {
        if(isset($already['nomoreemail']) && $already['nomoreemail'] == 't') {
            return -1;
        } else {
            if(isset($already['buzz_user_id']) && $already['buzz_user_id'] != $this->userid) {
                return $this->_doInviteOthers($name, $email);
            } else {
                $this->dbh->Update("invites", array("invite_date" => 'now'), "invite_id = " . $already["invite_id"]);
                return $already['invite_id'];
            }
        }
    } else {
        return $this->_doInviteOthers($name, $email);
    }
  }


  # Database Not Validated
  public function GetUsersICanSee($where="") {
    $res = $this->dbh->Select("username as user", "buzz_user bu left outer join blocked_emails b on bu.id = b.to_id and b.from_id = " . $this->userid, "b.to_id is NULL" . ($where == "" ? "" : " AND $where"), "username");
    return $res;
  }

//////////
        // PRIVATE METHODS -- EMAIL PREFERENCES
//////////


//////////
        // PUBLIC API -- SESSION FUNCTIONS
//////////

  # Database Not Validated
  public function LoginByName ($name, $pass) {
    $where = "username='$name' AND password='$pass'";
    return $this->_doLogin ($name, $pass, $where);
  }

  # Database Not Validated
  public function LoginByEmail ($email, $pass) {
    $where = "email='$email' AND password='$pass'";
    return $this->_doLogin ($name, $pass, $where);
  }
  
  # Database Not Validated
  public function Logout () {
    $this->sess->deactivate();
  }

  # Database Not Validated
  public function Sess_GetLastauth () {
    return $this->lastauth;
  }

  # Database Not Validated
  public function Sess_isAuth () {
    return $this->auth;
  }

//////////
        // PRIVATE METHODS -- SESSION FUNCTIONS
//////////

  # Database Not Validated
  private function _doLogin ($name, $pass, $where) {
    $this->auth = 0; // assume failure

    $res = $this->dbh->SelectSingleValue("id", "buzz_user", $where);

    if ($res > 0) {
      $this->auth = 1;
      $this->LoadUser($name);
      $this->lastauth = time();
      $this->sess->activate();
      $this->Sess_Update();
    }

    return $this->auth;
  }

  # Database Not Validated
  private function Sess_Update () {
    $this->sess->store ('name', $this->username);
    $this->sess->store ('id', $this->userid);
    $this->sess->store ('admin', $this->admin);
    $this->sess->store ('auth', $this->auth);
    $this->sess->store ('lastauth', $this->lastauth);
  }

//////////
        // PUBLIC API -- EBAY AUTH FUNCTIONS
//////////
  # Database Not Validated
  public function eBay_get_sid () {
    if ($this->ebay_sid == "") {
        $this->eBay_set_sid(0);
        $this->ebay_sid = 0;
    }
    return $this->ebay_sid;
  }

  # Database Not Validated
  public function eBay_get_auth ()
  {
    if ($this->ebay_auth == 0) {
      // LOAD FROM THE DATABASE
      $this->ebay_auth = $this->dbh->SelectSingleValue("ebay_auth", "ebay", "buzz_user_id=" . $this->userid);
      if($this->ebay_auth == -1 || $this->ebay_auth == "") {
	    $this->ebay_auth = 0;
      }
    } 
    return $this->ebay_auth;
  }

  # Database Not Validated
  public function eBay_get_expiration () {
    if ($this->ebay_expire == 0) {
      // LOAD FROM THE DATABASE
      $res = $this->dbh->Select("ebay_exp_date", "ebay",
                                "buzz_user_id=" . $this->userid);
      if($res && count($res)) {
        $this->ebay_expire = $res[0][0];
      } else {
        $this->ebay_expire = 0;
     }
    }
    return $this->ebay_expire;
  }

  # Database Not Validated
  public function eBay_set_sid ($sid) {
    $this->sess->store ('sid', $sid);
  }

  # Database Not Validated
  public function eBay_set_good_standing($good_standing)
  {
    $this->dbh->Update('buzz_user_profile', array("ebay_good_standing"=>$good_standing), "buzz_user_id = " . $this->userid);
  }

  # Database Not Validated
  public function eBay_set_power_seller($power_seller)
  {
    $this->dbh->Update('buzz_user_profile', array("ebay_power_seller"=>$power_seller), "buzz_user_id = " . $this->userid);
  }

  # Database Not Validated
  public function eBay_set_auth ($auth, $exp) {
    // THIS GOES IN THE DATABASE
    $this->ebay_auth = $auth; 
    $set = array ("ebay_auth" => $auth,
                  "ebay_exp_date" => $exp);
    $where = "buzz_user_id = '$this->userid'";
    return $this->dbh->Update ("ebay", $set, $where);

//    return $this->dbh->Insert("ebay", array("buzz_user_id" => $this->userid,
//						"ebay_auth" => $auth,
//						"entry_date" => "now",
//                                              "ebay_exp_date" => $exp));
  }

  # Database Not Validated
  public function eBay_is_auth_expired () {
    $sql = $this->eBay_get_expiration();

    $exp = aswas_user::SQL2Epoch($sql);

    return ($exp < time());
  }

  # Database Not Validated
  public function eBay_get_username () {
    if ($this->ebay_username == 0) {
      // LOAD FROM THE DATABASE
      $res = $this->dbh->Select("ebay_username", "ebay",
                                "buzz_user_id=" . $this->userid);
      if($res && count($res)) {
        $this->ebay_username = $res[0][0];
      } else {
        $this->ebay_username = 0;
     }
    }
    return $this->ebay_username;
  }

  # Database Not Validated
  public function eBay_set_username ($newUsername)
  {
    # Make sure the eBay username is unique.
    $buid = $this->dbh->SelectSingleValue("ebay_username", "ebay", "ebay_username = '$newUsername'");
    
    if($buid == $newUsername) {
      $goto = "/ebay_auth_error.php?error_text=" . urlencode("That eBay username is already in use by another account.  Contact customer support at support@shopandbuzz.com to resolve this issue.");
      header("Location: $goto");
      exit();
    }
    
    $buid = $this->dbh->SelectSingleValue("buzz_user_id", "ebay", "buzz_user_id = " . $this->userid);
    
    if($buid == $this->userid) {
        $res = $this->dbh->Update("ebay", array("ebay_username" => $newUsername), "buzz_user_id=" . $this->userid);
    } else {
        $res = $this->dbh->Insert("ebay", array("buzz_user_id" => $this->userid, "ebay_username" => $newUsername, "entry_date" => "now"));
    }
    
    if($res >= 1) {
      $this->ebay_username = $newUsername;
    } else {
      $this->ebay_username = 0;
    }
    return $this->ebay_username;
  }

/////////////////
/////////// Public - Recommendations
////////////////

  # Database Not Validated
  public function can_recommend($thisUser) {
    $thisUserID = $this->dbh->SelectSingleValue("id", "buzz_user", "username = '$thisUser'");
	$res = $this->dbh->SelectSingleValue("count(1)", "(honeycomb h inner join buzz_user_profile bup on (h.member_id = bup.buzz_user_id)) left outer join recommendation r on (h.buzz_user_id = r.buzz_user_id and h.member_id = r.seller_id)", "h.buzz_user_id=" . $this->userid . " and h.member_id=$thisUserID and bup.ebay_good_standing = 1 and h.recommendable='t' and r.buzz_user_id is NULL");
	return $res;
  }


  # Database Not Validated
  public function set_reco($myUser, $myVals) {
 
    $sellID = $this->dbh->SelectSingleValue("id", "buzz_user", "username='$myUser'");
    $myVals["seller_id"] = $sellID;
 	$myVals["buzz_user_id"] = $this->userid;
	if($this->can_recommend($myUser)) { 	
		$res = $this->dbh->Delete("recommendation", "buzz_user_id= " . $this->userid . " and seller_id = " . $sellID);
		$res = $this->dbh->Insert("recommendation", $myVals);
		$retVal = $res;
        $this->_hiveLogMessage($this->getDisplayName() . " added a new recommendation for $myUser.");
        $this->logMessage($myUser, $this->getDisplayName() . " added a new recommendation for $myUser.");
	} else {
		$retVal = -1;
	}
	return $retVal;
  }

  # Database Not Validated
  public function GetMyRecos($numUsers = -1) {
    if($numUsers != -1) {
      $top = "limit $numUsers";
    } else {
      $top = "";
    }

    $res = $this->dbh->Select("bu.username as name, bu.username as user, h.reco_id as id, h.reco_id as reco, bu.id as userid, h.seller_id as sellerid, h.buzz_user_id as recommenderid, *", "recommendation h, buzz_user bu", "bu.id=h.seller_id and h.buzz_user_id=" . $this->userid, "random()" . " $top");

    return $res;
  }

  # Database Not Validated
  public function GetRecoByName($myName) {

	$sellerid = $this->dbh->SelectSingleValue("id", "buzz_user", "username='$myName'");
	$res = $this->dbh->SelectFirstRow("username as name, reco_id as id, bu.id as userid, *", "recommendation h, buzz_user bu", "bu.id="
		 . "h.seller_id and h.seller_id=" . $sellerid);

    return $res;

  }

  # Database Not Validated
  public function CheckMyReco($myUser) {
    $res = $this->dbh->SelectSingleValue("count(1)", "recommendation r, buzz_user bu", "bu.id=r.seller_id and r.buzz_user_id= " . $this->userid . " and bu.username = '$myUser'");
    return $res;
  }


  # Database Not Validated
  public function RemoveReco($myUser) {
    $sellID = $this->dbh->SelectSingleValue("id", "buzz_user", "username='" . $myUser . "'");
	$res = $this->dbh->Delete("recommendation", "buzz_user_id= " . $this->userid . " and seller_id = " . $sellID);
    $this->_hiveLogMessage($this->getDisplayName() . " removed his/her recommendation of $myUser.");
    $this->logMessage($myUser, $this->getDisplayName() . " removed his/her recommendation of $myUser.");
	return $res;
   }


  # Database Not Validated
  public function GetRecosAboutMe ($numUsers = -1) {
    if($numUsers != -1) {
      $top = "limit $numUsers";
    } else {
      $top = "";
    }

    $res = $this->dbh->Select("bu.username as name, bu.username as user, h.reco_id as id, h.reco_id as reco, bu.id as userid, h.seller_id as sellerid, h.buzz_user_id as recommenderid, *", "recommendation h, buzz_user bu", "bu.id=h.buzz_user_id and h.seller_id=" . $this->userid, "random()" . " $top");

    return $res;

  }


  # Database Not Validated
  public function GetMyAvgRating() {
	$res = $this->dbh->SelectSingleValue("round(avg(expect_rating),2) as myAverage", "recommendation r", "seller_id=" . $this->userid);
    
    if($res == -1) {
        $res = "No Ratings Yet.";
    }
    
	return $res;

  }

  # Database Not Validated
  public function GetMyEbayInfo() {
	$res = $this->dbh->SelectFirstRow("feedback as avgFeedback, positive_pct as avgPositive, powerseller", "seller_info", "buzz_user_id=" . $this->userid);
	return $res;
  }


/////////////////
//////////Public - Referral
////////////////

  # Database Not Validated
  public function set_all_ref($refArray, $seller_id) {
	for($i=0; isset($refArray[$i]); $i++) {
		$this->set_ref($refArray[$i]["recommenderid"], $refArray[$i]["sellerid"]);
	}
  }

  # Database Not Validated
  public function has_comm_schedule($seller_id) {
	$res = $this->dbh->SelectSingleValue("id", "commission_schedule", "buzz_user_id=$seller_id");
	return $res;
  }

  # Database Not Validated
  public function set_ref($ref_buzz_id, $seller_buzz_id) {
	if ($this->confirmRef($seller_buzz_id) > 0 && $this->has_comm_schedule($seller_buzz_id) > 0) {
        $commScheduleID = $this->dbh->SelectSingleValue("id", "commission_schedule", "buzz_user_id = $seller_buzz_id and active = 't' and comm_level = 1");
        $rebateID = $this->dbh->SelectSingleValue("id", "commission_schedule", "buzz_user_id = $seller_buzz_id and active = 't' and comm_level = 2");
		$vals = array (
		        "buzz_user_id" => $this->userid,
		        "refer_user_id" => $ref_buzz_id,
		        "seller_id" => $seller_buzz_id,
		        "date_added" => "now",
			    "comm_schedule" => $commScheduleID,
                "rebate_id" => $rebateID
		        );
 		$res = $this->dbh->Insert("referral", $vals);
		return $res;
	} else {
		return -1;
	}
  }

  # Database Not Validated
  public function confirmRef($seller_id) {
	$res = $this->dbh->SelectSingleValue("buzz_user_id", "referral", "buzz_user_id=" . $this->userid . " and seller_id=$seller_id");

	if($res >= 1) {
		return -1;
	} else {
		return 1;
	}
  }

  # Database Not Validated
  public function setCanRecommend ($theUser) {
	$myHoney = $this->GetHoneycombMap();

	if ($myHoney[$theUser->GetDisplayName()]) {
		$res = $dbh->Update("honeycomb", "recommendable=1", "buzz_user_id=" . $this->userid . " and member_id=" . $myHoney[$theUser->GetDisplayName()]);
	} else {
		$res = -1;
	}
	
	return $res;
  }


  # Database Not Validated
  public function isValidUsername() {
	$res = $this->dbh->SelectSingleValue("id", "buzz_user", "username='" . $this->username . "'");
	return $res;
  }

  # Database Not Validated
  public function isValidEbayUsername() {
	$res = $this->dbh->SelectSingleValue("buzz_user_id", "ebay", "ebay_username='" . $this->ebay_username . "'");
	return $res;
  }

  
} // END OF CLASS
# Fucking thank God.
?>
